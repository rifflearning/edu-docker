proxy_headers_hash_max_size 2048;
proxy_headers_hash_bucket_size 256;

# connection_upgrade used in proxy_websocket_params.conf
map $http_upgrade $connection_upgrade
{
    default upgrade;
    '' close;
}

# proxy_x_forwarded_proto used in proxy_params.conf
map $http_x_forwarded_proto $proxy_x_forwarded_proto
{
  default $http_x_forwarded_proto;
  ''      $scheme;
}

upstream videodata_upstream
{
    server edu-riffcollector:3000;
}

upstream mattermost_upstream
{
    server edu-mm:8065;
}

server
{
    listen 80 default_server;
    listen [::]:80 default_server;

    # for letsencrypt certbot ssl cert renewal authorization confirmation files
    location ^~ /.well-known/acme-challenge/
    {
        default_type "text/plain";
        root         /usr/share/nginx/html;
    }

    location = /.well-known/acme-challenge/
    {
        return 404;
    }

    location /
    {
        return 301 https://$host$request_uri;
    }
}

server
{
    # SSL configuration

    listen 443 ssl default_server;
    listen [::]:443 ssl default_server;
    include snippets/site_ssl_cert.conf;
    include snippets/ssl_params.conf;
    proxy_http_version 1.1;

    include snippets/gzip_params.conf;
    include snippets/security_params.conf;

    # These mattermost location settings were copied from mattermost-docker/web
    # removing duplicate settings
    location /
    {
        proxy_pass http://mattermost_upstream;
        client_max_body_size 100M;
        include snippets/proxy_params.conf;
        proxy_set_header X-Forwarded-Ssl on;
        proxy_set_header Connection "";
        proxy_set_header X-Frame-Options SAMEORIGIN;
        proxy_buffers 256 16k;
        proxy_buffer_size 16k;
        proxy_read_timeout 600s;
    }

    location = /healthcheck
    {
        add_header 'Access-Control-Allow-Origin' '*';
        default_type application/json;
        return 200 '{\n  "site": "$host",\n  "status": "up"\n}';
    }

    location = /healthcheck/nginx
    {
        stub_status;
    }

    location ~ /api/v[0-9]+/(users/)?websocket$
    {
        proxy_pass http://mattermost_upstream;
        include snippets/proxy_params.conf;
        include snippets/proxy_websocket_params.conf;
        proxy_set_header X-Forwarded-Ssl on;
        proxy_set_header Connection "upgrade";

        client_max_body_size 100M;
        proxy_set_header X-Frame-Options SAMEORIGIN;
        proxy_buffers 256 16k;
        proxy_buffer_size 16k;
        proxy_read_timeout 600s;
    }

# See these references on how to supply a path so we can reverse proxy
# multiple upstream websocket connections since they can't all use /socket.io
# https://stackoverflow.com/questions/25896225/how-do-i-get-socket-io-running-for-a-subdirectory
# https://serverfault.com/questions/645643/using-nginx-to-proxy-multiple-instances-of-sockets-io
    location ^~ /api/videodata/socket.io/
    {
        proxy_pass http://videodata_upstream/socket.io/;
        include snippets/proxy_params.conf;
        include snippets/proxy_websocket_params.conf;
        include snippets/cors_params.conf;
    }

    location ^~ /api/videodata/
    {
        proxy_pass http://videodata_upstream/;
        include snippets/proxy_params.conf;
        include snippets/cors_params.conf;
    }
}
