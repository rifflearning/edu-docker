---
# override/additions to docker-compose.yml for development
# This defines dev image names and how to build them
# as well as development port mapping and volume binding
# to local repository working directories
version: '3.7'
services:
  edu-mm:
    image: 'rifflearning/riffmm:dev'
    build:
      context: riffmm
      dockerfile: Dockerfile
      target: dev
      args:
        NODE_VER: 18
        GOLANG_VER: 1.17.13
    environment:
      RIFF_LOGLEVEL: debug
    volumes:
      - ${MM_SERVER_PATH-../mattermost-server}:/home/mmuser/go/src/github.com/mattermost/mattermost-server
      - ${MM_WEBAPP_PATH-../mattermost-webapp}:/home/mmuser/go/src/github.com/mattermost/mattermost-webapp
      # For doing development inside the container:
      # ~/.npmrc is bound to allow private npm registries
      #     see https://docs.github.com/en/packages/using-github-packages-with-your-projects-ecosystem/configuring-npm-for-use-with-github-packages
      #     e.g. npm login --scope=@rifflearning --registry=https://npm.pkg.github.com
      # ~/.netrc is bound to allow private go modules
      #     see https://golang.org/doc/faq#git_https
      - ~/.npmrc:/home/mmuser/.npmrc
      - ~/.netrc:/home/mmuser/.netrc
      # for doing development on the riff plugins:
      - ${MM_PLUGIN_SURVEY_PATH-../mattermost-plugin-riff-survey}:/home/mmuser/riff/mattermost-plugin-riff-survey
      - ${MM_PLUGIN_CORE_PATH-../mattermost-plugin-riff-core}:/home/mmuser/riff/mattermost-plugin-riff-core
      - ${MM_PLUGIN_LTI_PATH-../mattermost-plugin-riff-lti}:/home/mmuser/riff/mattermost-plugin-riff-lti
      - ${MM_RIFF_VIDEOCHAT_PATH-../riff-plugin-video-chat}:/home/mmuser/riff/riff-plugin-video-chat
      - ${MM_RIFF_METRICS_PATH-../riff-plugin-metrics}:/home/mmuser/riff/riff-plugin-metrics

  edu-riffcollector:
    image: 'ghcr.io/rifflearning/riffcollector:${RIFFCOLLECTOR_TAG-1.0.0}'
    ports:
      - '3000:3000'

#  The following is just in case you need to be doing development on the riffcollector in
#  conjunction w/ edu. This would be unusual.
#  edu-riffdata:
#    image: 'rifflearning/riffcollector:dev'
#    build:
#      context: ${RIFFCOLLECTOR_PATH-../riffcollector}
#      dockerfile: Dockerfile
#      target: dev
#      args:
#        NODE_VER: 16
#        PORT: 3000
#    ports:
#      - '3000:3000'
#    volumes:
#      - ${RIFFCOLLECTOR_PATH-../riffcollector}:/app

  # Although the dev edu-web is the same as the production edu-web built w/ the release script
  # we give it a dev image name and tag. Also the prod edu-web uses config and volumes that dev doesn't
  edu-web:
    image: 'rifflearning/edu-web:dev'
    build:
      context:  edu-web
      dockerfile: Dockerfile
      args:
        NGINX_VER: latest
# If you need to get and use letsencrypt certs on your dev machine you will need some form of
# these volumes. The ones to preserve the certs and nginx config changes after a container is removed
# and recreated (as is done for prod), and ones to inject the private key for the letsencrypt riff accounts.
#    volumes:
#      - letsencrypt-data:/etc/letsencrypt
#      - nginx-snippets:/etc/nginx/snippets
#      - edu-web/ffe8-private_key.json:/etc/letsencrypt/accounts/acme-v02.api.letsencrypt.org/directory/ffe85d86a55543ea1d026e0cd44f5050/private_key.json:ro
#      - edu-web/ceea-private_key.json:/etc/letsencrypt/accounts/acme-staging-v02.api.letsencrypt.org/directory/ceea58b40644ba4347b37bb4736eb377/private_key.json:ro

  edu-riffcollector-db:
    ports:
      - '27017:27017'

  edu-mm-db:
    ports:
      - '3306:3306'
